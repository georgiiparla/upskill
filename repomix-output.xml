This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: node_modules
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.env.example
.gitignore
app/dashboard/loading.js
app/dashboard/page.js
app/error.js
app/feedback/loading.js
app/feedback/new/page.js
app/feedback/page.js
app/feedback/request/page.js
app/globals.css
app/layout.js
app/leaderboard/loading.js
app/leaderboard/page.js
app/page.js
app/quests/loading.js
app/quests/page.js
components/auth/Auth.js
components/auth/Modal.js
components/Dashboard.js
components/feedback/Feedback.js
components/feedback/FeedbackHub.js
components/feedback/FeedbackSentimentChart.js
components/feedback/RequestHub.js
components/HypedToggleSwitch.js
components/Leaderboard.js
components/Quests.js
components/shared/AppLayout.js
components/shared/Buttons.js
components/shared/GlobalErrorNotifier.js
components/shared/Helper.js
components/shared/Navbar.js
components/shared/RouteErrorUI.js
components/shared/skeletons/Skeletons.js
components/shared/ThemeProvider.js
context/AuthContext.js
jsconfig.json
lib/delay.js
lib/helper_func.js
lib/server-api.js
mock/mock_data.js
next.config.mjs
openapi.yaml
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
tailwind.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".env.example">
NEXT_PUBLIC_API_URL=http://localhost:9292
ENABLE_API_DELAY=false

NEXT_PUBLIC_USE_MOCK_DASHBOARD=false
NEXT_PUBLIC_USE_MOCK_FEEDBACK=true
NEXT_PUBLIC_USE_MOCK_LEADERBOARD=false
NEXT_PUBLIC_USE_MOCK_QUESTS=false
</file>

<file path="app/feedback/request/page.js">
"use client"

import RequestFeedbackPage from "@/components/feedback/RequestHub";

export default function RequestPage() {
  return (
    <RequestFeedbackPage/>
  );
}
</file>

<file path="components/auth/Auth.js">
"use client";
import { useState } from 'react';
import { useAuth } from '@/context/AuthContext';
import Image from 'next/image';
import { Loader2, Eye, EyeOff } from 'lucide-react';


export const Auth = () => {
    const [isLogin, setIsLogin] = useState(true);
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const [loading, setLoading] = useState(false);
    const { login, signup } = useAuth();
    const [success, setSuccess] = useState(false);
    const [showPassword, setShowPassword] = useState(false);


    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        setError('');

        const response = isLogin
            ? await login(email, password)
            : await signup(username, email, password);

        setLoading(false);

        if (!response.success) {
            setSuccess(false);
            setError(response.error || `An unknown error occurred during ${isLogin ? 'login' : 'signup'}.`);
        } else if (!isLogin) {
            // After successful signup, switch to login view with a success message
            setIsLogin(true);
            setSuccess(true)
            setError('Signup successful! Please log in.');
        }
    };


    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
            <div className="w-full max-w-md p-8 space-y-6 bg-white rounded-lg shadow-md dark:bg-gray-800">


                <div className="flex justify-center">
                    <Image src="/csway-logo.png" alt="CSway Logo" width={48} height={48} />
                </div>
                <h2 className="text-2xl font-bold text-center text-gray-900 dark:text-white">
                    {isLogin ? 'Welcome Back!' : 'Create an Account'}
                </h2>




                <form className="space-y-4" onSubmit={handleSubmit}>


                    {!isLogin && (
                        <div>
                            <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-200">Username</label>
                            <input
                                type="text"
                                placeholder='Your username'
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                className="w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                required
                            />
                        </div>
                    )}


                    <div>
                        <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-200">Email</label>
                        <input
                            type="email"
                            placeholder='Enter your email'
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                            required
                        />
                    </div>



                    <div>
                        <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-200">Password</label>
                        <div className="relative">
                            <input
                                type={showPassword ? 'text' : 'password'}
                                value={password}
                                placeholder='Enter the password'
                                onChange={(e) => setPassword(e.target.value)}
                                className="w-full px-3 py-2 pr-10 border border-gray-300 rounded-md dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                                required
                            />
                            <button
                                type="button"
                                onClick={() => setShowPassword(!showPassword)}
                                className="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200"
                                aria-label={showPassword ? "Hide password" : "Show password"}
                            >
                                {showPassword ? (
                                    <EyeOff className="w-5 h-5" />
                                ) : (
                                    <Eye className="w-5 h-5" />
                                )}
                            </button>
                        </div>
                    </div>




                    {error && <p className={`text-sm text-center ${success ? "text-csway-green" : "text-red-500"}`}>{error}</p>}




                    <button
                        type="submit"
                        disabled={loading}
                        className="w-full px-4 py-[9px] font-bold text-white bg-csway-green rounded-md hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-csway-green/50 disabled:bg-csway-green/40 flex items-center justify-center !mt-10"
                    >
                        {loading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
                        {isLogin ? 'Login' : 'Sign Up'}
                    </button>
                </form>




                <p className="text-sm text-center text-gray-600 dark:text-gray-400">
                    {isLogin ? "Don't have an account?" : 'Already have an account?'}
                    <button onClick={() => { setIsLogin(!isLogin); setError(''); }} className="ml-1 font-medium text-csway-orange hover:underline">
                        {isLogin ? 'Sign up' : 'Login'}
                    </button>
                </p>

            </div>
        </div>
    );
};
</file>

<file path="components/auth/Modal.js">
"use client";

import { X } from 'lucide-react';


export const Modal = ({ isOpen, onClose, onConfirm, title, children }) => {
    
    if (!isOpen) {
        return null;
    }
    

    return (
        
        <div 
            className="fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm"
            onClick={onClose} // Close modal on backdrop click
        >
            

            
            <div
                className="relative w-full max-w-md p-6 bg-white rounded-lg shadow-xl dark:bg-gray-800"
                onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside the modal
            >
            

                <div className="flex items-center justify-between pb-4 border-b border-gray-200 dark:border-gray-700">
                    
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">{title}</h3>
                    

                    
                    <button
                        onClick={onClose}
                        className="p-1 rounded-full text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700"
                    >
                        <X className="w-5 h-5" />
                    </button>
                    
                </div>


                
                <div className="py-6 text-sm text-gray-600 dark:text-gray-300 mb-3">
                    {children}
                </div>
                


                <div className="flex justify-end space-x-4">

                    
                    <button
                        onClick={onClose}
                        className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600 focus:outline-none"
                    >
                        Cancel
                    </button>
                    

                    
                    <button
                        onClick={onConfirm}
                        className="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none"
                    >
                        Sign Out
                    </button>
                    


                </div>
                
            </div>
        </div>
    );
};
</file>

<file path="components/feedback/RequestHub.js">
"use client"
import { React } from 'react';
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import toast, { Toaster } from 'react-hot-toast';
import { Send, Loader2, RefreshCw, Clipboard } from 'lucide-react';
import { sleep } from '@/lib/delay';

import { Card } from '../shared/Helper';
import { generateRandomTag } from '@/lib/helper_func';

// Request form component
const RequestFeedbackForm = () => {

    // React stuff
    const [topic, setTopic] = useState('');
    const [description, setDescription] = useState('');
    const [generatedTag, setGeneratedTag] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    // Run the effect only once — when the component first mounts
    useEffect(() => {
        setGeneratedTag(generateRandomTag());
    }, []);

    // Component specific helper function
    const handleRegenerateTag = () => {
        setGeneratedTag(generateRandomTag());
        toast('New tag generated!', { icon: '✨' });
    };

    // TODO: handle copy to clipboard
    const handleCopyToClipboard = () => {
        navigator.clipboard.writeText(generatedTag).then(() => {
            toast.success('Tag copied to clipboard!');
        }, () => {
            toast.error('Failed to copy tag.');
        });
    };


    // Submit feedback function
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (topic.trim().length < 3) {
            toast.error('Please enter a more descriptive topic.');
            return;
        }
        setIsSubmitting(true);
        const toastId = toast.loading('Generating your request...');
        await sleep(1500);
        console.log("Feedback Request Submitted:", { topic, description, tag: generatedTag });
        toast.success('Feedback request created!', { id: toastId });
        setTopic('');
        setDescription('');
        setGeneratedTag(generateRandomTag());
        setIsSubmitting(false);
    };

    return (
        <>
            <Toaster position="bottom-right" toastOptions={{ style: { background: '#333', color: '#fff' } }} />

            <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, ease: "easeInOut" }}
                className="max-w-xl mx-auto" // Changed from w-full
            >

                <form onSubmit={handleSubmit}>

                    <Card className="mt-4">

                        <div className="flex flex-col gap-8">

                            {/* 1 */}
                            <div>
                                <label className="block mb-2 text-base font-medium text-gray-700 dark:text-gray-300">
                                    Your Unique Share Tag
                                </label>
                                <div className="flex items-center gap-2">
                                    <div className="flex-grow px-4 py-3 bg-gray-100 dark:bg-gray-700/50 border border-dashed border-gray-300 dark:border-gray-600 rounded-lg text-center font-mono tracking-wider text-gray-800 dark:text-gray-200">
                                        {generatedTag}
                                    </div>
                                    <button type="button" onClick={handleCopyToClipboard} className="p-3 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors" title="Copy to Clipboard">
                                        <Clipboard className="h-5 w-5" />
                                    </button>
                                    <button type="button" onClick={handleRegenerateTag} className="p-3 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors" title="Generate New Tag">
                                        <RefreshCw className="h-5 w-5" />
                                    </button>
                                </div>
                            </div>

                            {/* 2 */}
                            <div>
                                <label htmlFor="feedback-topic" className="block mb-2 text-base font-medium text-gray-700 dark:text-gray-300">
                                    Topic <span className="text-red-500">*</span>
                                </label>
                                <input
                                    id="feedback-topic"
                                    type="text"
                                    value={topic}
                                    onChange={(e) => setTopic(e.target.value)}
                                    className="block w-full px-4 py-3 bg-gray-50 dark:bg-gray-800/60 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors"
                                    placeholder="e.g., Q3 Project Proposal"
                                    required
                                />
                            </div>
                            
                            {/* 3 */}
                            <div>
                                <label htmlFor="feedback-desc" className="block mb-2 text-base font-medium text-gray-700 dark:text-gray-300">
                                    Description (Optional)
                                </label>
                                <textarea
                                    id="feedback-desc"
                                    value={description}
                                    onChange={(e) => setDescription(e.target.value)}
                                    className="block w-full min-h-[200px] p-4 bg-gray-50 dark:bg-gray-800/60 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors resize-y"
                                    placeholder="Add any context or specific questions..."
                                ></textarea>
                            </div>

                            {/* 5 */}
                            <div className="pt-2">
                                <button
                                    type="submit"
                                    disabled={isSubmitting}
                                    className="w-full inline-flex items-center justify-center px-6 py-3.5 font-semibold text-white bg-blue-600 rounded-lg shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:ring-offset-2 dark:focus:ring-offset-gray-900 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all"
                                >
                                    {isSubmitting ? (
                                        <><Loader2 className="mr-2 h-5 w-5 animate-spin" />Submitting...</>
                                    ) : (
                                        <><Send className="mr-2 h-4 w-4" />Create Request</> // Matched icon
                                    )}
                                </button>
                            </div>
                        </div>

                    </Card>

                </form>

            </motion.div>
        </>
    );
};


export default function RequestFeedbackPage() {
    return (
        <div className="container mx-auto px-4">
            <RequestFeedbackForm />
        </div>
    );
}
</file>

<file path="components/shared/AppLayout.js">
"use client"

import { useAuth } from '@/context/AuthContext';
import { Auth } from '@/components/auth/Auth';
import { Navbar } from '@/components/shared/Navbar';
import { Loader2 } from 'lucide-react';

export default function AppLayout({ children }) {
    const { isAuthenticated, loading } = useAuth();

    if (loading) {
        return (
            <div className="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
                <Loader2 className="h-12 w-12 animate-spin text-csway-green" />
            </div>
        );
    }

    if (!isAuthenticated) {
        return <Auth />;
    }

    return (
        <div className="min-h-screen bg-gray-100 dark:bg-gray-900">
            <Navbar />
            <main>
                <div className="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
                    {children}
                </div>
            </main>
        </div>
    );
}
</file>

<file path="components/shared/Buttons.js">
const ActionButton = ({ icon, text, shortText, colorScheme = 'orange' }) => {
    const colorClasses = {
        orange: 'text-csway-orange focus:ring-csway-orange',
        blue: 'text-blue-500 dark:text-blue-400 focus:ring-blue-500',
    };

    const selectedColor = colorClasses[colorScheme] || colorClasses.orange;

    return (
        <button className={`
            flex items-center justify-center px-3 py-1.5 text-xs font-semibold
            bg-gray-200/50 hover:bg-gray-200
            dark:bg-gray-700/50 dark:hover:bg-gray-700
            rounded-md transition-colors focus:outline-none focus:ring-2
            focus:ring-offset-2 dark:focus:ring-offset-gray-800
            ${selectedColor}
        `}>
            {icon}
            {shortText ? (
                <>
                    <span className="hidden md:inline">{text}</span>
                    <span className="inline md:hidden">{shortText}</span>
                </>
            ) : (
                <span>{text}</span>
            )}
        </button>
    );
};

export {ActionButton};
</file>

<file path="components/shared/GlobalErrorNotifier.js">
"use client";

import { useAuth } from "@/context/AuthContext";
import { AlertTriangle, X } from "lucide-react";

export const GlobalErrorNotifier = () => {
    const { error, clearError } = useAuth();

    if (!error) {
        return null; // Don't render anything if there is no error
    }

    return (
        <div className="fixed top-0 left-0 right-0 z-[100] bg-red-600 text-white shadow-lg animate-pulse-once">
            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div className="flex items-center justify-between h-12">
                    <div className="flex items-center">

                        <AlertTriangle className="h-6 w-6 mr-3" />
                        <p className="font-medium text-sm">{error}</p>
                    </div>

                    <button
                        onClick={clearError}
                        className="p-2 rounded-full hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-white"
                        aria-label="Dismiss"
                    >
                        <X className="h-5 w-5" />
                    </button>
                </div>
            </div>
        </div>
    );
};
</file>

<file path="components/shared/Navbar.js">
"use client"

import { React, useState, useEffect } from 'react';
import { useTheme } from 'next-themes';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { Menu, X, Sun, Moon, LogOut, Loader2 } from 'lucide-react';
import Image from 'next/image';

import { useAuth } from '@/context/AuthContext';
import { Modal } from '@/components/auth/Modal';

// Helper NavLink component that uses the current URL path to determine its state
const NavLink = ({ href, children, scrolled }) => {
    const pathname = usePathname();
    const isActive = pathname === href;

    const baseClass = scrolled
        ? "relative px-3 py-2 text-sm font-medium transition-colors duration-150 ease-in-out"
        : "border-b-2 px-1 pt-1 text-sm font-medium transition-colors duration-150 ease-in-out";

    const activeClass = isActive
        ? (scrolled ? "text-gray-900 dark:text-gray-100" : "border-csway-orange dark:border-csway-orange text-gray-900 dark:text-gray-100")
        : (scrolled ? "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300" : "border-transparent text-gray-500 dark:text-gray-400 hover:border-gray-300 dark:hover:border-gray-600 hover:text-gray-700 dark:hover:text-gray-300");
    
    return (
        <Link href={href} className={`${baseClass} ${activeClass}`}>
            <span className={`absolute left-0 top-1/2 -translate-y-1/2 h-1.5 w-1.5 bg-csway-green rounded-full transition-opacity duration-300 ${isActive && scrolled ? 'opacity-100' : 'opacity-0'}`}></span>
            {children}
        </Link>
    );
};

// Helper Mobile NavLink component
const MobileNavLink = ({ href, children, closeMenu }) => {
    const pathname = usePathname();
    const isActive = pathname === href;
    const activeClass = isActive
        ? "bg-csway-green/10 dark:bg-gray-700 text-csway-green dark:text-white"
        : "text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700";

    return (
        <Link href={href} onClick={closeMenu} className={`block w-full text-left px-4 py-2 text-base font-medium rounded-md ${activeClass}`}>
            {children}
        </Link>
    );
};


export const Navbar = () => {
    const { theme, setTheme } = useTheme();
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const [scrolled, setScrolled] = useState(false);
    const [isLogoutModalOpen, setIsLogoutModalOpen] = useState(false);
    const { user, logout } = useAuth();

    // Scroll effect logic
    useEffect(() => {
        const handleScroll = () => {
            setScrolled(window.scrollY > 50);
        };
        document.addEventListener('scroll', handleScroll);
        return () => document.removeEventListener('scroll', handleScroll);
    }, []);

    const handleLogoutConfirm = () => {
        logout();
        setIsLogoutModalOpen(false);
    };
    
    return (
        <>
            <Modal
                isOpen={isLogoutModalOpen}
                onClose={() => setIsLogoutModalOpen(false)}
                onConfirm={handleLogoutConfirm}
                title="Confirm Sign Out"
            >
                Are you sure you want to sign out of your account?
            </Modal>
            
            <nav className="bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50 transition-all duration-300 ease-in-out">
                {/* All your previous <nav> JSX goes here */}
                {/* ... (The code is identical to what was in your page.js) ... */}
                 <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                    <div className={`flex items-center justify-between h-16 transition-all duration-300 ease-in-out ${scrolled ? 'h-[44px]' : ''}`}>
                        <div className="flex items-center">
                            <Link href="/" className="flex-shrink-0 text-gray-900 dark:text-white font-bold text-xl flex items-center">
                                <Image src="/csway-logo.png" alt="CSway Logo" width={24} height={24} className="mr-2" />
                                <span className={`transition-all duration-300 ease-in-out whitespace-nowrap overflow-hidden ${scrolled ? 'w-0 opacity-0' : ''}`}>Upskill</span>
                            </Link>
                            <div className="hidden md:block">
                                <div className="ml-10 flex items-baseline space-x-4">
                                    <NavLink href="/dashboard" scrolled={scrolled}>Home</NavLink>
                                    <NavLink href="/feedback" scrolled={scrolled}>My Feedback</NavLink>
                                    <NavLink href="/quests" scrolled={scrolled}>Quests</NavLink>
                                    <NavLink href="/leaderboard" scrolled={scrolled}>Leaderboard</NavLink>
                                </div>
                            </div>
                        </div>
                        <div className="flex items-center">
                            <div className="flex items-center space-x-3">
                                <span className="hidden sm:inline text-sm text-gray-700 dark:text-gray-300">
                                    Welcome, <span className="font-bold">{user?.username}</span>
                                </span>
                                <button
                                    onClick={() => setIsLogoutModalOpen(true)}
                                    className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none"
                                >
                                    <LogOut className="h-5 w-5" />
                                </button>
                                <button
                                    onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                                    className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none"
                                >
                                    {theme === 'dark' ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
                                </button>
                            </div>
                            <div className="ml-2 md:hidden">
                                <button onClick={() => setIsMenuOpen(!isMenuOpen)} className="inline-flex items-center justify-center p-2 rounded-md text-gray-500 dark:text-gray-400">
                                    {isMenuOpen ? <X className="block h-6 w-6" /> : <Menu className="block h-6 w-6" />}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {isMenuOpen && (
                    <div className="md:hidden border-t border-gray-200 dark:border-gray-700">
                        <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3">
                            <MobileNavLink href="/" closeMenu={() => setIsMenuOpen(false)}>Home</MobileNavLink>
                            <MobileNavLink href="/feedback" closeMenu={() => setIsMenuOpen(false)}>My Feedback</MobileNavLink>
                            <MobileNavLink href="/quests" closeMenu={() => setIsMenuOpen(false)}>Quests</MobileNavLink>
                            <MobileNavLink href="/leaderboard" closeMenu={() => setIsMenuOpen(false)}>Leaderboard</MobileNavLink>
                        </div>
                    </div>
                )}
            </nav>
        </>
    )
}
</file>

<file path="components/shared/RouteErrorUI.js">
"use client";

import { AlertTriangle } from 'lucide-react';

export function RouteErrorUI({ error, reset }) {
    return (
        <div className="flex flex-col items-center justify-center text-center p-8 rounded-lg bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800/50">
            <AlertTriangle className="h-12 w-12 text-red-500 mb-4" />
            <h2 className="text-xl font-bold text-red-700 dark:text-red-300">
                Something went wrong!
            </h2>
            <p className="mt-2 text-sm text-red-600 dark:text-red-400">
                {/* Display a generic message or the actual error for debugging */}
                {error?.message || "An unexpected error occurred on the server."}
            </p>
            <button
                onClick={
                    // Attempt to recover by trying to re-render the segment
                    () => reset()
                }
                className="mt-6 px-4 py-2 text-sm font-semibold text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
            >
                Try again
            </button>
        </div>
    );
}
</file>

<file path="components/shared/skeletons/Skeletons.js">
const CardSkeleton = ({ children, className = '' }) => (
    <div className={`p-6 bg-white dark:bg-gray-800/50 rounded-xl border border-gray-200 dark:border-gray-700 ${className}`}>
        {children}
    </div>
);

const TextSkeleton = ({ className = '' }) => (
    <div className={`bg-gray-200 dark:bg-gray-700 rounded-md ${className}`} />
);

const SectionTitleSkeleton = () => (
    <div className="h-7 w-1/2 bg-gray-300 dark:bg-gray-700 rounded mb-4"></div>
);

export { CardSkeleton, TextSkeleton, SectionTitleSkeleton }
</file>

<file path="components/shared/ThemeProvider.js">
"use client";

import { ThemeProvider as NextThemesProvider } from 'next-themes';
import { useEffect, useState } from 'react';


export function ThemeProvider({ children }) {

	
	const [mounted, setMounted] = useState(false);

	useEffect(() => {
		setMounted(true);
	}, []);

	if (!mounted) {
		return <>{children}</>;
	}
	

	return (

		
		<NextThemesProvider attribute="class" defaultTheme="system">
			{children}
		</NextThemesProvider>
		
	);
}
</file>

<file path="jsconfig.json">
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}
</file>

<file path="lib/delay.js">
export const sleep = (ms) => {
    if (process.env.ENABLE_API_DELAY === 'true') {
        return new Promise((resolve) => setTimeout(resolve, ms));
    }
    
    return Promise.resolve();
};
</file>

<file path="next.config.mjs">
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;
</file>

<file path="openapi.yaml">
openapi: 3.0.0
info:
  title: "Upskill API"
  version: "1.0.0"
  description: "API for the Upskill platform, managing quests, feedback, leaderboards, and user dashboards."
servers:
  - url: http://localhost:9292
    description: Local development server
tags:
  - name: Auth
    description: User authentication and session management
  - name: Dashboard
    description: Endpoints for the main user dashboard
  - name: Feedback
    description: Operations related to user feedback
  - name: Quests
    description: Access to quests and challenges
  - name: Leaderboard
    description: User rankings and points
paths:
  /auth/signup:
    post:
      tags: [Auth]
      summary: "Register a new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username: { type: string, example: "NewUser" }
                email: { type: string, format: email, example: "user@example.com" }
                password: { type: string, format: password, example: "securepassword123" }
      responses:
        '201':
          description: "User created successfully"
        '400':
          description: "Missing required fields"
        '409':
          description: "User with this email already exists"
  /auth/login:
    post:
      tags: [Auth]
      summary: "Log in a user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email, example: "user@example.com" }
                password: { type: string, format: password, example: "securepassword123" }
      responses:
        '200':
          description: "Login successful, session cookie is set"
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: "Logged in successfully" }
                  user: { $ref: '#/components/schemas/User' }
        '401':
          description: "Invalid email or password"
  /auth/logout:
    post:
      tags: [Auth]
      summary: "Log out a user"
      responses:
        '200':
          description: "Logout successful"
  /auth/profile:
    get:
      tags: [Auth]
      summary: "Check current user session"
      responses:
        '200':
          description: "Returns the current user's session status"
          content:
            application/json:
              schema:
                oneOf:
                  - properties:
                      logged_in: { type: boolean, example: true }
                      user: { $ref: '#/components/schemas/User' }
                  - properties:
                      logged_in: { type: boolean, example: false }
  /dashboard:
    get:
      tags: [Dashboard]
      summary: "Get dashboard data"
      security:
        - cookieAuth: []
      responses:
        '200':
          description: "Successful response with all dashboard data"
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DashboardData' }
        '401':
          description: "Unauthorized"
  /feedback:
    get:
      tags: [Feedback]
      summary: "Get feedback history for current user"
      security:
        - cookieAuth: []
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1 }
        - name: limit
          in: query
          schema: { type: integer, default: 5 }
      responses:
        '200':
          description: "A paginated list of feedback items"
          content:
            application/json:
              schema:
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/FeedbackItem' }
                  hasMore: { type: boolean }
        '401':
          description: "Unauthorized"
  /quests:
    get:
      tags: [Quests]
      summary: "Get all quests"
      security:
        - cookieAuth: []
      responses:
        '200':
          description: "A list of all available quests"
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Quest' }
        '401':
          description: "Unauthorized"
  /leaderboard:
    get:
      tags: [Leaderboard]
      summary: "Get the leaderboard"
      security:
        - cookieAuth: []
      responses:
        '200':
          description: "A list of users sorted by points"
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/LeaderboardEntry' }
        '401':
          description: "Unauthorized"
components:
  schemas:
    User:
      type: object
      properties:
        id: { type: integer, example: 1 }
        username: { type: string, example: "Alex Rivera" }
        email: { type: string, format: email, example: "alex@example.com" }
    Quest:
      type: object
      properties:
        id: { type: integer }
        title: { type: string }
        description: { type: string }
        points: { type: integer }
        progress: { type: integer }
        completed: { type: boolean }
    FeedbackItem:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        subject: { type: string }
        content: { type: string }
        created_at: { type: string, format: date }
        sentiment: { type: string, enum: [Positive, Neutral, Negative] }
    LeaderboardEntry:
      type: object
      properties:
        id: { type: integer }
        name: { type: string, example: "Alex Rivera" }
        points: { type: integer, example: 4250 }
        badges:
          type: array
          items: { type: string, example: "🚀" }
    DashboardData:
      type: object
      properties:
        agendaItems:
          type: array
          items:
            type: object
            properties:
              id: { type: integer }
              type: { type: string }
              title: { type: string }
              category: { type: string }
              due_date: { type: string, format: date }
        activityStream:
          type: array
          items:
            type: object
            properties:
              id: { type: integer }
              user_name: { type: string }
              action: { type: string }
              created_at: { type: string }
        meetings:
          type: array
          items:
            type: object
            properties:
              id: { type: integer }
              title: { type: string }
              meeting_date: { type: string, format: date }
              status: { type: string }
        activityData:
          type: object
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: rack.session
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="app/dashboard/loading.js">
import { CardSkeleton } from "@/components/shared/skeletons/Skeletons";

export default function DashboardSkeleton() {
    return (
        <div className="space-y-8 animate-pulse">
            {/* Skeleton for "This Week's Agenda" Card */}
            <CardSkeleton className="!py-16">
                <div className="h-7 w-1/2 bg-gray-300 dark:bg-gray-700 rounded mb-7"></div>
                <div className="relative border-l border-gray-200 dark:border-gray-700 ml-3 space-y-6">
                    {[...Array(3)].map((_, i) => (
                        <div key={i} className="ml-6 flex items-center space-x-4">
                            <div className="absolute w-6 h-6 bg-gray-300 dark:bg-gray-700 rounded-full -left-3"></div>
                            <div className="p-4 bg-gray-200 dark:bg-gray-700/50 rounded-lg h-16 w-full"></div>
                        </div>
                    ))}
                </div>
            </CardSkeleton>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                {/* Column 1: ActivityCard Skeleton */}
                <div className="md:col-span-1">
                    <CardSkeleton className='h-full' innerClassName='h-full flex flex-col justify-between'>
                        <div className='h-full flex flex-col justify-between'>
                            {/* Replaced solid bar with a two-button toggle skeleton */}
                            <div className="flex space-x-1 rounded-lg bg-gray-300 dark:bg-gray-700 p-1 h-10">
                                <div className="w-full rounded-md bg-white dark:bg-gray-800"></div>
                                <div className="w-full rounded-md"></div>
                            </div>

                            {/* Replaced solid blocks with outlined cards containing inner shapes */}
                            <div className="space-y-4 w-full">
                                {/* First Stat Box */}
                                <div className="border border-gray-200 dark:border-gray-700 p-4 rounded-lg h-[88px]">
                                    <div className="flex items-start space-x-4">
                                        <div className="h-6 w-6 rounded-md bg-gray-300 dark:bg-gray-600 mt-1"></div>
                                        <div className="flex-1 space-y-2">
                                            <div className="h-4 w-3/4 rounded bg-gray-300 dark:bg-gray-600"></div>
                                            <div className="flex items-baseline space-x-2">
                                                <div className="h-6 w-1/4 rounded bg-gray-300 dark:bg-gray-600"></div>
                                                <div className="h-4 w-1/3 rounded bg-gray-300 dark:bg-gray-600"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                {/* Second Stat Box */}
                                <div className="border border-gray-200 dark:border-gray-700 p-4 rounded-lg h-[88px]">
                                     <div className="flex items-start space-x-4">
                                        <div className="h-6 w-6 rounded-md bg-gray-300 dark:bg-gray-600 mt-1"></div>
                                        <div className="flex-1 space-y-2">
                                            <div className="h-4 w-3/4 rounded bg-gray-300 dark:bg-gray-600"></div>
                                            <div className="flex items-baseline space-x-2">
                                                <div className="h-6 w-1/4 rounded bg-gray-300 dark:bg-gray-600"></div>
                                                <div className="h-4 w-1/3 rounded bg-gray-300 dark:bg-gray-600"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </CardSkeleton>
                </div>
                 {/* Column 2: Live Activity Stream Skeleton */}
                <div className="md:col-span-2">
                    <CardSkeleton>
                        <div className="h-7 w-1/2 bg-gray-300 dark:bg-gray-700 rounded mb-4"></div>
                        <div className="space-y-4">
                            {[...Array(3)].map((_, i) => (
                                <div key={i} className="flex items-start space-x-4 p-3">
                                    <div className="h-5 w-5 bg-gray-300 dark:bg-gray-700 rounded-full mt-1"></div>
                                    <div className="flex-1 space-y-2">
                                        <div className="h-4 w-3/4 bg-gray-300 dark:bg-gray-700 rounded"></div>
                                        <div className="h-3 w-1/4 bg-gray-300 dark:bg-gray-700 rounded"></div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </CardSkeleton>
                </div>
            </div>
        </div>
    );
}
</file>

<file path="app/error.js">
"use client";

import { useEffect } from 'react';
import { RouteErrorUI } from '@/components/shared/RouteErrorUI';

export default function Error({ error, reset }) {
  useEffect(() => {
    console.error(error);
  }, [error]);

  return <RouteErrorUI error={error} reset={reset} />;
}
</file>

<file path="app/leaderboard/loading.js">
import { SectionTitleSkeleton, CardSkeleton } from "@/components/shared/skeletons/Skeletons";

const PodiumSkeleton = () => (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-5 items-end">
        {/* 2nd Place Skeleton */}
        <div className="md:order-1">
            <CardSkeleton className="text-center p-10 ">
                <div className="h-10 w-10 mx-auto mb-2 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
                <div className="h-6 w-3/4 mx-auto bg-gray-300 dark:bg-gray-700 rounded"></div>
                <div className="h-4 w-1/2 mx-auto mt-2 bg-gray-300 dark:bg-gray-700 rounded"></div>
                <div className="h-8 w-1/3 mx-auto mt-2 bg-gray-300 dark:bg-gray-700 rounded"></div>
            </CardSkeleton>
        </div>
        {/* 1st Place Skeleton */}
        <div className="md:order-2 relative z-10">
            <CardSkeleton className="text-center p-12  transform md:scale-110 shadow-lg">
                <div className="h-12 w-12 mx-auto mb-2 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
                <div className="h-7 w-3/4 mx-auto bg-gray-300 dark:bg-gray-700 rounded"></div>
                <div className="h-5 w-1/2 mx-auto mt-2 bg-gray-300 dark:bg-gray-700 rounded"></div>
                <div className="h-9 w-1/3 mx-auto mt-2 bg-gray-300 dark:bg-gray-700 rounded"></div>
            </CardSkeleton>
        </div>
        {/* 3rd Place Skeleton */}
        <div className="md:order-3">
            <CardSkeleton className="text-center p-10 ">
                <div className="h-10 w-10 mx-auto mb-2 bg-gray-300 dark:bg-gray-700 rounded-full"></div>
                <div className="h-6 w-3/4 mx-auto bg-gray-300 dark:bg-gray-700 rounded"></div>
                <div className="h-4 w-1/2 mx-auto mt-2 bg-gray-300 dark:bg-gray-700 rounded"></div>
                <div className="h-8 w-1/3 mx-auto mt-2 bg-gray-300 dark:bg-gray-700 rounded"></div>
            </CardSkeleton>
        </div>
    </div>
);

const LadderSkeleton = () => (
    <CardSkeleton>
        <div className="overflow-x-auto">
            <div className="space-y-4 p-2">
                {[...Array(5)].map((_, i) => (
                    <div key={i} className="flex items-center space-x-4">
                        <div className="h-6 w-6 bg-gray-300 dark:bg-gray-700 rounded"></div>
                        <div className="h-6 flex-1 bg-gray-300 dark:bg-gray-700 rounded"></div>
                        <div className="h-6 w-1/4 bg-gray-300 dark:bg-gray-700 rounded"></div>
                    </div>
                ))}
            </div>
        </div>
    </CardSkeleton>
);

export default function LeaderboardLoading() {
    return (
        <div className="space-y-12 animate-pulse">
            <div>
                <SectionTitleSkeleton />
                <PodiumSkeleton />
            </div>
            <div>
                <SectionTitleSkeleton />
                <LadderSkeleton />
            </div>
        </div>
    );
}
</file>

<file path="app/quests/loading.js">
import { Card } from "@/components/shared/Helper";

const QuestCardSkeleton = () => {
    return (
        <Card className="animate-pulse">
            <div className="flex justify-between items-start">
                <div className="h-6 bg-gray-300 dark:bg-gray-700 rounded w-3/4"></div>
                <div className="h-5 bg-gray-300 dark:bg-gray-700 rounded-full w-12"></div>
            </div>
            <div className="mt-3 space-y-2">
                <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-full"></div>
                <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-5/6"></div>
            </div>
            <div className="mt-5">
                <div className="flex justify-between mb-1">
                    <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-1/4"></div>
                    <div className="h-4 bg-gray-300 dark:bg-gray-700 rounded w-1/6"></div>
                </div>
                <div className="w-full bg-gray-300 dark:bg-gray-700 rounded-full h-2.5"></div>
            </div>
            <br/>
        </Card>
    );
};

export default function QuestsLoading() {
    return (
        <div className="animate-pulse">
            <div className="h-7 w-1/2 bg-gray-300 dark:bg-gray-700 rounded mb-4"></div>
            <div className="h-5 w-3/4 bg-gray-300 dark:bg-gray-700 rounded mb-6"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <QuestCardSkeleton />
                <QuestCardSkeleton />
                <QuestCardSkeleton />
                <QuestCardSkeleton />
                <QuestCardSkeleton />
                <QuestCardSkeleton />
            </div>
        </div>
    );
}
</file>

<file path="components/feedback/Feedback.js">
"use client"

import dynamic from 'next/dynamic';
import { PlusCircle, Send, BarChart2, MessageSquare, Check, TrendingUp } from 'lucide-react';
import { Card, SectionTitle, HistoryListItem } from "../shared/Helper";
import Link from 'next/link';
import { CardSkeleton, TextSkeleton } from "@/components/shared/skeletons/Skeletons";
import { ActionButton } from '../shared/Buttons';

// Focus activity card (Overview) component for overview feedback page
const FocusActivityCard = ({ title, data, className = '' }) => {
    // utility data for component
    const ICONS = {
        "Requests Sent": <Send className="h-5 w-5 text-blue-500" />,
        "Requests Answered": <Check className="h-5 w-5 text-teal-500" />,
        "Requests Ignored": <MessageSquare className="h-5 w-5 text-gray-500" />,
    };

    return (
        <Card className={className}>

            {/* Card title (e.g. Overview) */}
            <SectionTitle className='mb-7' icon={<TrendingUp className="h-5 w-5 text-csway-green" />} title={title} />

            <div className="mt-4 space-y-2">
                {/* Requests Sent, Requests Answered, Requests Ignored... */}
                {data.map((item) => (
                    <div key={item.name} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/60 rounded-lg">

                        <div className="flex items-center gap-3">

                            {/* Icon (e.g. Message Square) */}
                            <div className="bg-gray-200 dark:bg-gray-700 p-2 rounded-full">
                                {ICONS[item.name] || <BarChart2 className="h-5 w-5 text-gray-500" />}
                            </div>
                            {/* Title (e.g. Requests Sent) */}
                            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">{item.name}</span>

                        </div>

                        {/* Value (e.g. 5) */}
                        <span className="text-xl font-bold text-gray-800 dark:text-gray-100">{item.value}</span>

                    </div>
                ))}
            </div>
        </Card>
    );
};

// Unique sentiment chart skeleton (required only for client side first time chart rendering)
const SentimentChartSkeleton = () => {
    return (
        <CardSkeleton className="lg:col-span-4">
            <div className="flex justify-between items-center">
                <TextSkeleton className="h-5 w-36" />
            </div>
            <div className="relative flex justify-center items-center my-4 h-[200px]">
                <div className="h-48 w-48 rounded-full bg-gray-200 dark:bg-gray-700" />
                <div className="absolute h-40 w-40 rounded-full bg-white dark:bg-gray-800/50" />
                 <TextSkeleton className="absolute h-8 w-10" />
            </div>
             <div className="mt-14 space-y-3">
                {[...Array(3)].map((_, i) => (
                    <div key={`legend-${i}`} className="flex items-center justify-between text-sm">
                        <div className="flex items-center gap-2">
                            <div className="w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600" />
                            <TextSkeleton className="h-4 w-32" />
                        </div>
                        <TextSkeleton className="h-4 w-6" />
                    </div>
                ))}
            </div>
        </CardSkeleton>
    )
}

// Chart rendering (dynamic to not slow a webpage)
const FeedbackSentimentChart = dynamic(
    () => import('./FeedbackSentimentChart'),
    {
        ssr: false,
        loading: () => <SentimentChartSkeleton />
    }
);

// required props passed to Feedback component from outside
export const Feedback = ({ 
    initialHistory, 
    initialRequests, 
    givenSentimentData, 
    receivedSentimentData, 
    focusData 
}) => {
    
    // component-specific data
    const GIVEN_SENTIMENT_COLORS = ['#14b8a6', '#f59e0b', '#f43f5e'];
    const RECEIVED_SENTIMENT_COLORS = ['#3b82f6', '#8b5cf6', '#ec4899'];

    // component-specific getSentimentColor function
    const getSentimentColor = (sentiment) => {
        switch (sentiment) {
            case 'Positive': return 'border-green-500';
            case 'Negative': return 'border-red-500';
            default: return 'border-amber-500';
        }
    }

    // component-specific getRequestStatusColor function
    const getRequestStatusColor = (status) => {
        switch (status) {
            case 'Posted': return 'border-blue-500';
            case 'Pending': return 'border-gray-500';
            default: return 'border-gray-400';
        }
    }

    return (
        // "space-y-8" = Add vertical spacing (margin) of 2rem (which equals 32 pixels) between all direct child elements stacked vertically
        <div className="space-y-8">

            {/* First row-section */}
            <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
                
                {/* Feedback card */}
                <Card className="flex flex-col lg:col-span-8">

                    {/* Upper block (title + button) */}
                    <div className="flex justify-between items-center mb-6">
                        <SectionTitle icon={<MessageSquare className="h-6 w-6 text-csway-orange" />} title="Feedback" />
                        <Link href="/feedback/new">
                            <ActionButton icon={<PlusCircle className="h-4 w-4 mr-1.5" />} text="Send Feedback" shortText="Send" colorScheme="orange" />
                        </Link>
                    </div>

                    {/* Bottom block (history list) */}
                    <div className="flex-grow overflow-y-auto no-scrollbar max-h-[365px]">
                        <ul className="space-y-4">
                            {initialHistory.map((item, index) => (
                                <HistoryListItem key={`${item.id}-feedback-${index}`} subject={item.subject} createdAt={item.created_at} content={item.content} borderColorClass={getSentimentColor(item.sentiment)} />
                            ))}
                        </ul>
                    </div>

                </Card>

                {/* Sentiment chart */}
                <FeedbackSentimentChart
                    title="Sentiment"
                    givenData={givenSentimentData}
                    receivedData={receivedSentimentData}
                    givenColors={GIVEN_SENTIMENT_COLORS}
                    receivedColors={RECEIVED_SENTIMENT_COLORS}
                    className="lg:col-span-4"
                />

            </div>

            {/* Second row-section */}
            <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">

                {/* Requests card */}
                <Card className="flex flex-col lg:col-span-8">

                    {/* Upper block (title + button) */}
                    <div className="flex justify-between items-center mb-6">
                        <SectionTitle icon={<MessageSquare className="h-6 w-6 text-blue-500" />} title="Requests" />
                        <Link href="/feedback/request">
                            <ActionButton icon={<PlusCircle className="h-4 w-4 mr-1.5" />} text="Request New" shortText="Request" colorScheme="blue" />
                        </Link>
                    </div>

                    {/* Bottom block (history list) */}
                    <div className="flex-grow overflow-y-auto no-scrollbar max-h-[184px]">
                        <ul className="space-y-4">
                            {initialRequests.map((item) => (
                                <HistoryListItem key={item.id} subject={item.subject} createdAt={item.requested_at} content={item.question} borderColorClass={getRequestStatusColor(item.status)} />
                            ))}
                        </ul>
                    </div>

                </Card>
                
                {/* Focus Activity Card */}
                <FocusActivityCard
                    title="Overview"
                    data={focusData}
                    className="lg:col-span-4"
                />

            </div>

        </div>
    );
};
</file>

<file path="components/feedback/FeedbackSentimentChart.js">
"use client"
import { useState } from 'react';
import { BarChart2, ChevronDown } from 'lucide-react';
import { PieChart, Pie, Cell, Tooltip, ResponsiveContainer } from 'recharts';
import { useTheme } from 'next-themes';
import { Card, SectionTitle } from "../shared/Helper";

const FeedbackSentimentChart = ({ title, givenData, receivedData, givenColors, receivedColors, className }) => {
    //  React stuff
    const [view, setView] = useState('given'); // 'given' or 'received'
    const { theme } = useTheme();

    // intermediate validation
    const isGivenView = view === 'given';
    const currentData = isGivenView ? givenData : receivedData;
    const currentColors = isGivenView ? givenColors : receivedColors;
    // summation
    const total = currentData.reduce((acc, entry) => acc + entry.value, 0);

    // Sub description
    const Legend = () => (
        // Legend block
        <div className="mt-14 space-y-2">

            {currentData.map((entry, index) => (
                // Legend row generation
                <div 
                    key={`legend-${index}`} 
                    className="flex items-center justify-between text-sm"
                >

                    {/* Legend row description */}
                    <div className="flex items-center gap-2">
                        {/* mini icon*/}
                        <span
                            className="w-3 h-3 rounded-full"
                            style={{ backgroundColor: currentColors[index % currentColors.length] }}
                        />
                        {/* Legend row name */}
                        <span className="text-gray-600 dark:text-gray-400">{entry.name}</span>
                    </div>

                    {/* Legend row value*/}
                    <span className="font-semibold text-gray-800 dark:text-gray-200">{entry.value}</span>
                </div>
            ))}

        </div>
    );

    return (
        // Chart card
        <Card className={className}>

            {/* First row */}
             <div className="flex justify-between items-center">

                <SectionTitle icon={<BarChart2 className="h-5 w-5 text-csway-green" />} title={title} />

                {/* Dropdown */}
                <div className="relative">
                    <select
                        value={view}
                        onChange={(e) => setView(e.target.value)}
                        className="
                            appearance-none bg-gray-200/50 dark:bg-gray-700/50 text-xs font-semibold
                            text-gray-700 dark:text-gray-300 py-1.5 pl-3 pr-8 rounded-md
                            focus:outline-none focus:ring-2 focus:ring-csway-orange
                        "
                    >
                        <option value="given">Given</option>
                        <option value="received">Received</option>
                    </select>
                    <ChevronDown className="h-4 w-4 absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 pointer-events-none" />
                </div>

            </div>

            {/* Second row */}
            <div className="mt-4 relative flex justify-center items-center h-[200px]">
                {/* Gray background fill for the entire chart area */}
                <div className="absolute h-[180px] w-[180px] rounded-full bg-gray-100 dark:bg-gray-900"></div>

                {/* Adaptive RECHARTS container for charts */}
                <ResponsiveContainer width="100%" height="100%" className="absolute">

                    {/* Chart */}
                    <PieChart>
                        {/* Pie itself */}
                        <Pie
                            data={currentData}
                            innerRadius={75}
                            outerRadius={90}
                            paddingAngle={5}
                            dataKey="value"
                            isAnimationActive={false}
                        >
                            {currentData.map((entry, index) => (
                                <Cell
                                    key={`cell-${view}-${index}`}
                                    fill={currentColors[index % currentColors.length]}
                                    stroke="none"
                                />
                            ))}
                        </Pie>
                        
                        {/* Hint on hover */}
                        <Tooltip
                            cursor={{ fill: 'transparent' }}
                             contentStyle={{
                                backgroundColor: theme === 'dark' ? 'rgba(31, 41, 55, 0.8)' : 'rgba(255, 255, 255, 0.8)',
                                backdropFilter: 'blur(4px)',
                                borderRadius: '0.5rem',
                                border: '1px solid',
                                borderColor: theme === 'dark' ? '#374151' : '#e5e7eb',
                            }}
                            itemStyle={{
                                color: theme === 'dark' ? '#e5e7eb' : '#1f2937',
                            }}
                        />
                        
                        {/* Central total counter */}
                        <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" className="text-3xl font-bold fill-current text-gray-800 dark:text-gray-200">
                            {total}
                        </text>
                    </PieChart>

                </ResponsiveContainer>
            </div>

            {/* Legend */}
            <Legend />

        </Card>
    );
};

export default FeedbackSentimentChart;
</file>

<file path="components/shared/Helper.js">
import { formatRelativeTime } from "@/lib/helper_func";

export const SectionTitle = ({ icon, title, className = '' }) => (
    <div className={`flex items-center mb-4 ${className}`}>

        {icon}

        <h2 className="text-xl font-bold text-gray-800 dark:text-gray-200 ml-3">{title}</h2>

    </div>
);

export const Card = ({ children, className = '', innerClassName = '' }) => (
    <div className={`bg-white/50 dark:bg-gray-800/50 backdrop-blur-lg rounded-xl border border-white/20 shadow-md transition-all duration-300 ${className}`}>
        <div className={`p-6 ${innerClassName}`}>{children}</div>
    </div>
);

export const InfoCard = ({ icon, title, items, renderItem, listClassName = "space-y-3" }) => {
    return (
        <Card className="flex flex-col ">
            <SectionTitle icon={icon} title={title} />
            {/* //!Technical debt with Height */}
            <div className="flex-grow overflow-y-auto no-scrollbar max-h-[210px]">
                {items && items.length > 0 ? (
                    <ul className={listClassName}>
                        {items.map(item => renderItem(item))}
                    </ul>
                ) : (
                    <div className="flex items-center justify-center h-full text-gray-500 dark:text-gray-400">
                        <p>No items to display.</p>
                    </div>
                )}
            </div>
        </Card>
    );
};

export const HistoryListItem = ({ subject, createdAt, content, borderColorClass }) => {
    return (
        <li
            className={`
                bg-gray-50 dark:bg-gray-800/60 p-4 rounded-lg
                transition-colors hover:bg-gray-100 dark:hover:bg-gray-700/80
                border-l-2 ${borderColorClass}
            `}
        >
            <div className="flex justify-between items-center mb-1">
                <h4 className="text-sm font-semibold text-gray-800 dark:text-gray-200">{subject}</h4>
                <span className="text-xs text-gray-500 dark:text-gray-400">{formatRelativeTime(createdAt)}</span>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-300 truncate">
                {content}
            </p>
        </li>
    );
};
</file>

<file path="lib/helper_func.js">
import { formatDistanceToNow } from 'date-fns';

export const generateRandomTag = () => {
    const adjectives = ['helpful', 'clear', 'kind', 'honest', 'guiding', 'focused', 'actionable', 'bright', 'insightful', 'creative'];
    const nouns = ['Insight', 'Idea', 'Draft', 'Review', 'Comment', 'Echo', 'Signal', 'Quest', 'Growth', 'Path'];

    const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];
    const noun = nouns[Math.floor(Math.random() * nouns.length)];

    const timestampSuffix = String(Date.now()).slice(-4);

    return `${adjective}${noun}${timestampSuffix}`;
};

export const formatRelativeTime = (dateString) => {
    if (!dateString) return '';
    try {
        const date = new Date(dateString);
        return formatDistanceToNow(date, { addSuffix: true });
    } catch (error) {
        console.error("Invalid date string for formatting:", dateString);
        return dateString;
    }
};
</file>

<file path="lib/server-api.js">
import { headers } from 'next/headers';

export async function serverFetch(path, options = {}) {
    const api_url = process.env.NEXT_PUBLIC_API_URL;
    const incomingHeaders = await headers();
    
    const requestHeaders = new Headers(options.headers || {});

    if (incomingHeaders.has('Cookie')) {
        requestHeaders.set('Cookie', incomingHeaders.get('Cookie'));
    }
    
    if (options.body && typeof options.body === 'object') {
        options.body = JSON.stringify(options.body);
        if (!requestHeaders.has('Content-Type')) {
            requestHeaders.set('Content-Type', 'application/json');
        }
    }

    try {
        const response = await fetch(`${api_url}${path}`, {
            ...options,
            headers: requestHeaders,
            cache: 'no-store'
        });

        if (!response.ok) {
            let errorMessage = `Request to '${path}' failed with status ${response.status}`;
            try {
                const errorBody = await response.json();
                errorMessage = errorBody.error || errorBody.message || errorMessage;
            } catch (e) {
                // The response was not JSON, so we use the generic error.
            }
            console.error(`API fetch failed: ${errorMessage}`);
            throw new Error(errorMessage);
        }

        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
            return response.json();
        }
        
        return response.text();

    } catch (error) {
        console.error(`An error occurred during server fetch for path: ${path}`, error.message);
        throw error;
    }
}
</file>

<file path="postcss.config.mjs">
const config = {
	plugins: {
		tailwindcss: {},
		autoprefixer: {},
	},
};

export default config;
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


repomix-output.md
</file>

<file path="app/dashboard/page.js">
import Dashboard from "@/components/Dashboard";
import { serverFetch } from "@/lib/server-api";
import { sleep } from "@/lib/delay";
import { MOCK_DASHBOARD } from "@/mock/mock_data";

async function getDashboardData() {
    await sleep(2000);
    if (process.env.NEXT_PUBLIC_USE_MOCK_DASHBOARD === 'true') {
        return MOCK_DASHBOARD;
    }
    return serverFetch('/dashboard');
}

export default async function HomePage() {
  const dashboardData = await getDashboardData();
  
  return <Dashboard initialData={dashboardData} />;
}
</file>

<file path="app/feedback/loading.js">
import { CardSkeleton, TextSkeleton } from "@/components/shared/skeletons/Skeletons";

// Skeleton for a list item in the history cards
const HistoryListItemSkeleton = () => (
    <li className="bg-gray-50 dark:bg-gray-800/60 p-4 rounded-lg border-l-2 border-gray-300 dark:border-gray-600">
        <div className="flex justify-between items-center mb-2">
            <TextSkeleton className="h-4 w-2/5" />
            <TextSkeleton className="h-3 w-1/5" />
        </div>
        <TextSkeleton className="h-3 w-4/5" />
    </li>
);

// Skeleton for an item in the Focus Activity card
const FocusActivityItemSkeleton = () => (
    <li className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/60 rounded-lg">
        <div className="flex items-center gap-3">
            <div className="p-2 rounded-full bg-gray-200 dark:bg-gray-700">
                <div className="w-5 h-5 rounded-full bg-gray-300 dark:bg-gray-600" />
            </div>
            <TextSkeleton className="h-4 w-32" />
        </div>
        <TextSkeleton className="h-6 w-8" />
    </li>
);

export default function FeedbackLoadingSkeleton() {
    return (
        <div className="animate-pulse space-y-8">
            <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
                
                <CardSkeleton className="lg:col-span-8 flex flex-col">
                    <div className="flex justify-between items-center mb-6">
                        <TextSkeleton className="h-6 w-48" />
                    </div>
                    <ul className="space-y-4 list-none">
                        {[...Array(4)].map((_, i) => <HistoryListItemSkeleton key={`feedback-hist-${i}`} />)}
                    </ul>
                </CardSkeleton>
                
                <CardSkeleton className="lg:col-span-4">
                    <div className="flex justify-between items-center">
                        <TextSkeleton className="h-5 w-36" />
                    </div>
                    <div className="relative flex justify-center items-center my-4 h-[200px]">
                        <div className="h-48 w-48 rounded-full bg-gray-200 dark:bg-gray-700" />
                        <div className="absolute h-40 w-40 rounded-full bg-white dark:bg-gray-800/50" />
                        <TextSkeleton className="absolute h-8 w-10" />
                    </div>
                    <div className="mt-14 space-y-3">
                        {[...Array(3)].map((_, i) => (
                            <div key={`legend-${i}`} className="flex items-center justify-between text-sm">
                                <div className="flex items-center gap-2">
                                    <div className="w-3 h-3 rounded-full bg-gray-300 dark:bg-gray-600" />
                                    <TextSkeleton className="h-4 w-32" />
                                </div>
                                <TextSkeleton className="h-4 w-6" />
                            </div>
                        ))}
                    </div>
                </CardSkeleton>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
                
                <CardSkeleton className="lg:col-span-8 flex flex-col">
                    <div className="flex justify-between items-center mb-6">
                        <TextSkeleton className="h-6 w-52" />
                    </div>
                    <ul className="space-y-4 list-none">
                        {[...Array(3)].map((_, i) => <HistoryListItemSkeleton key={`request-hist-${i}`} />)}
                    </ul>
                </CardSkeleton>
                
                <CardSkeleton className="lg:col-span-4">
                    <TextSkeleton className="h-5 w-32 mb-7" />
                    <ul className="mt-4 space-y-2 list-none">
                        {[...Array(3)].map((_, i) => <FocusActivityItemSkeleton key={`focus-item-${i}`} />)}
                    </ul>
                </CardSkeleton>
            </div>
        </div>
    );
}
</file>

<file path="components/feedback/FeedbackHub.js">
"use client"
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import toast, { Toaster } from 'react-hot-toast';
import { Star, Check, ThumbsDown, Send, Loader2, Lightbulb, ChevronDown, HelpCircle } from 'lucide-react';
import { sleep } from '@/lib/delay';

import { Card } from "@/components/shared/Helper";
import { MOCK_FEEDBACK_TOPICS } from '@/mock/mock_data';

const SentimentPicker = ({ selected, onSelect }) => {

    // component-specific sentiment data
    const sentiments = [
        { name: 'Exceeds Expectations', icon: <Star className="h-8 w-8" />, color: 'text-green-500', bgColor: 'hover:bg-teal-500/10' },
        { name: 'Meets Expectations', icon: <Check className="h-8 w-8" />, color: 'text-amber-500', bgColor: 'hover:bg-amber-500/10' },
        { name: 'Needs Improvement', icon: <ThumbsDown className="h-8 w-8" />, color: 'text-red-500', bgColor: 'hover:bg-red-500/10' },
    ];

    return (
        // Assesment block
        <div>

            <label className="block mb-2 text-base font-medium text-gray-700 dark:text-gray-300">Assessment</label>
            {/* Sentiment buttons block*/}
            <div className="grid grid-cols-3 gap-3">
                {/* Buttons */}
                {/* TODO: May be make reusable later */}
                {sentiments.map(sentiment => (
                    <button
                        key={sentiment.name}
                        type="button"
                        onClick={() => onSelect(sentiment.name)}
                        className={`
                            flex flex-col items-center justify-center p-3 h-[80px] rounded-lg border-2 transition-all

                            ${selected === sentiment.name
                                ? `${sentiment.color} border-current`
                                : `text-gray-500 dark:text-gray-400 border-gray-200 dark:border-gray-700 ${sentiment.bgColor}`
                            }
                        `}
                    >
                        {sentiment.icon}
                    </button>
                ))}
            </div>

        </div>

    );
};


const NewFeedbackForm = () => {
    // React stuff
    const [topic, setTopic] = useState(MOCK_FEEDBACK_TOPICS[0]);
    const [sentiment, setSentiment] = useState('Meets Expectations');
    const [content, setContent] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    // Handle submit
    const handleSubmit = async (e) => {
        e.preventDefault();
        if (content.trim().length < 10) {
            toast.error('Please provide more detailed feedback.');
            return;
        }

        setIsSubmitting(true);
        const toastId = toast.loading('Submitting your feedback...');
        await sleep(1500);
        toast.success('Feedback submitted successfully!', { id: toastId });
        console.log({ topic, sentiment, content });

        setContent('');
        setSentiment('Meets Expectations');
        setIsSubmitting(false);
    };

    return (
        <>
            {/* Pop up */}
            <Toaster position="bottom-right" toastOptions={{ style: { background: '#333', color: '#fff' } }} />

            {/* Animation */}
            <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5 }}
                className="max-w-xl mx-auto"
            >

                {/* Form*/}
                <form onSubmit={handleSubmit}>
                    {/* Form card*/}
                    <Card className="mt-4">

                        {/* Form block*/}
                        <div className="flex flex-col gap-10">

                            {/* First row*/}
                            <div>
                                <label htmlFor="feedback-topic" className="block mb-2 text-base font-medium text-gray-700 dark:text-gray-300">
                                    Topic
                                </label>

                                <div className="relative">
                                    {/* Dropdown */}
                                    <select
                                        id="feedback-topic"
                                        value={topic}
                                        onChange={(e) => setTopic(e.target.value)}
                                        className="appearance-none block w-full px-4 py-3 bg-gray-50 dark:bg-gray-800/60 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-csway-orange focus:border-csway-orange transition-colors"
                                    >
                                        {MOCK_FEEDBACK_TOPICS.map(t => <option key={t} value={t}>{t}</option>)}
                                    </select>
                                    <ChevronDown className="h-5 w-5 absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none" />
                                </div>
                            </div>

                            {/* Second row */}
                            <SentimentPicker selected={sentiment} onSelect={setSentiment} />
                            
                            {/* Third row */}
                            <details className="group">
                                <summary className="flex items-center gap-2 text-sm font-medium text-gray-500 dark:text-gray-400 cursor-pointer list-none select-none">
                                    <HelpCircle className="h-4 w-4 text-sky-500" />
                                    What do these ratings mean?
                                    <ChevronDown className="h-4 w-4 transition-transform group-open:rotate-180" />
                                </summary>
                                <ul className="mt-3 pl-6 text-xs text-gray-600 dark:text-gray-400 space-y-2">
                                    <li className="list-disc"><strong>Exceeds Expectations:</strong> For work that is truly exceptional and goes above and beyond.</li>
                                    <li className="list-disc"><strong>Meets Expectations:</strong> For work that is solid and meets all requirements.</li>
                                    <li className="list-disc"><strong>Needs Improvement:</strong> For work that could use some revisions.</li>
                                </ul>
                            </details>

                            {/* Fourth row */}
                            <div>
                                <label htmlFor="feedback-text" className="block mb-2 text-base font-medium text-gray-700 dark:text-gray-300">
                                    What are your thoughts?
                                </label>
                                <textarea
                                    id="feedback-text"
                                    value={content}
                                    onChange={(e) => setContent(e.target.value)}
                                    className="block w-full min-h-[200px] p-4 bg-gray-50 dark:bg-gray-800/60 border border-gray-300 dark:border-gray-700 rounded-lg focus:ring-2 focus:ring-csway-orange focus:border-csway-orange transition-colors resize-y"
                                    placeholder="Be specific and provide examples..."
                                ></textarea>
                            </div>

                            {/* Fifth row */}
                            <details className="group">
                                <summary className="flex items-center gap-2 text-sm font-medium text-gray-500 dark:text-gray-400 cursor-pointer list-none select-none">
                                    <Lightbulb className="h-4 w-4 text-yellow-500" />
                                    Tips for effective feedback
                                    <ChevronDown className="h-4 w-4 transition-transform group-open:rotate-180" />
                                </summary>
                                <ul className="mt-4 pl-6 text-xs text-gray-600 dark:text-gray-400 space-y-2">
                                    <li className="list-disc">Focus on specific behaviors and their impact, not on personality.</li>
                                    <li className="list-disc">Offer actionable suggestions for improvement.</li>
                                    <li className="list-disc">Ensure your feedback is timely and constructive.</li>
                                </ul>
                            </details>

                            {/* Sixth row */}
                            <div>
                                <button
                                    type="submit"
                                    disabled={isSubmitting}
                                    className="w-full inline-flex items-center justify-center px-6 py-3 font-semibold text-white bg-csway-orange rounded-lg shadow-sm hover:bg-csway-orange/90 focus:outline-none focus:ring-2 focus:ring-csway-orange/50 focus:ring-offset-2 dark:focus:ring-offset-gray-900 disabled:bg-gray-400 disabled:cursor-not-allowed transition-all"
                                >
                                    {isSubmitting ? (
                                        <>
                                            <Loader2 className="mr-2 h-5 w-5 animate-spin" />
                                            Submitting...
                                        </>
                                    ) : (
                                        <>
                                            <Send className="mr-2 h-4 w-4" />
                                            Submit Feedback
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>

                    </Card>

                </form>

            </motion.div>
        </>
    );
};

export default function NewFeedbackPage() {
    return (
        // Page block
        <div className="container mx-auto px-4">
            <NewFeedbackForm />
        </div>
    );
}
</file>

<file path="components/HypedToggleSwitch.js">
import { motion } from 'framer-motion';

const HypedToggleSwitch = ({ options, activeOption, setActiveOption, className }) => {
    return (
        <div className={`flex space-x-1 rounded-lg dark:bg-slate-700 p-1 ${className}`}>
            {options.map(option => (
                <button
                    key={option.id}
                    onClick={() => setActiveOption(option.id)}
                    className={`relative w-full rounded-lg py-1.5 text-sm font-semibold transition-colors
                        ${activeOption === option.id
                            ? 'text-slate-800 dark:text-slate-100'
                            : 'text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-white'
                        }`}
                >
                    {activeOption === option.id && (
                        <motion.div
                            layoutId="active-pill"
                            className="absolute inset-[-4px] bg-transparent border-2 border-green-500 rounded-md"
                            transition={{ type: "spring", stiffness: 400, damping: 30 }}
                        />
                    )}
                    <span className="relative z-10">{option.label}</span>
                </button>
            ))}
        </div>
    );
};

export default HypedToggleSwitch;
</file>

<file path="README.md">
Start with Feedback.js to explore

ctrl-f -> export
</file>

<file path="tailwind.config.js">
module.exports = {
    darkMode: 'class',
    content: [
        './pages/**/*.{js,ts,jsx,tsx,mdx}',
        './components/**/*.{js,ts,jsx,tsx,mdx}',
        './app/**/*.{js,ts,jsx,tsx,mdx}',
    ],
    theme: {
        extend: {
            colors: {
                'csway': {
                    'green': '#22a55e',
                    'orange': '#f3b75a',
                    'red': '#e37a7b',
                }
            }
        },
    },
    plugins: [], 
};
</file>

<file path="app/feedback/new/page.js">
"use client"

import NewFeedbackPage from "@/components/feedback/FeedbackHub";

export default function FeedbackPage() {
  return (
    <NewFeedbackPage/>
  );
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

.no-scrollbar::-webkit-scrollbar {
    display: none;
}

.no-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
}
</file>

<file path="app/leaderboard/page.js">
import { Leaderboard } from "@/components/Leaderboard";
import { serverFetch } from "@/lib/server-api"; 
import { sleep } from "@/lib/delay";
import { MOCK_LEADERBOARD } from "@/mock/mock_data";

async function getLeaderboardData() {
    await sleep(2000);
    if (process.env.NEXT_PUBLIC_USE_MOCK_LEADERBOARD === 'true') {
        return MOCK_LEADERBOARD;
    }
    return serverFetch('/leaderboard');
}

export default async function LeaderboardPage() {
    const leaderboardData = await getLeaderboardData();
    return <Leaderboard initialData={leaderboardData} />;
}
</file>

<file path="app/quests/page.js">
import { Quests } from "@/components/Quests";
import { serverFetch } from "@/lib/server-api";
import { sleep } from "@/lib/delay";
import { MOCK_QUESTS } from "@/mock/mock_data";

async function getQuestsData() {
    await sleep(2000);
    if (process.env.NEXT_PUBLIC_USE_MOCK_QUESTS === 'true') {
        return MOCK_QUESTS;
    }
    return serverFetch('/quests');
}

export default async function QuestsPage() {
    const questsData = await getQuestsData();
    return <Quests initialQuests={questsData} />;
}
</file>

<file path="app/feedback/page.js">
import { Feedback } from "@/components/feedback/Feedback";
import { serverFetch } from "@/lib/server-api";
import { MOCK_FEEDBACK_HISTORY, MOCK_FEEDBACK_REQUESTS } from "@/mock/mock_data";
import { sleep } from "@/lib/delay";

async function getFeedbackData() {
    await sleep(3000);

    let historyData;
    let requestsData;

    if (process.env.NEXT_PUBLIC_USE_MOCK_FEEDBACK === 'true') {
        historyData = MOCK_FEEDBACK_HISTORY;
        requestsData = MOCK_FEEDBACK_REQUESTS;
    } else {
        try {
            const feedbackResponse = await serverFetch('/feedback');
            historyData = feedbackResponse.items || [];
        } catch (error) {
            console.warn("Could not fetch feedback history", error.message);
        }

        try {
            requestsData = await serverFetch('/feedback/requests');
        } catch (error) {
            console.warn("Could not fetch feedback requests", error.message);
        }
    }
    
    // For data that doesn't have an API endpoint yet, we source it here
    const givenSentimentData = [
        { name: 'Exceeds Expectations', value: 21 },
        { name: 'Meets Expectations', value: 45 },
        { name: 'Needs Improvement', value: 8 },
    ];
    const receivedSentimentData = [
        { name: 'Exceeds Expectations', value: 2 },
        { name: 'Meets Expectations', value: 20 },
        { name: 'Needs Improvement', value: 3 },
    ];
    const focusData = [
        { name: 'Requests Sent', value: 12 },
        { name: 'Requests Answered', value: 38 },
        { name: 'Requests Ignored', value: 5 },
    ];

    return { 
        history: historyData, 
        requests: requestsData,
        givenSentiment: givenSentimentData,
        receivedSentiment: receivedSentimentData,
        focus: focusData
    };
}

export default async function FeedbackPage() {
    const data = await getFeedbackData();
    
    return (
        <Feedback 
            initialHistory={data.history} 
            initialRequests={data.requests}
            givenSentimentData={data.givenSentiment}
            receivedSentimentData={data.receivedSentiment}
            focusData={data.focus}
        />
    );
}
</file>

<file path="context/AuthContext.js">
"use client";

import React, { createContext, useState, useContext, useEffect } from 'react';


const AuthContext = createContext(null);


export const AuthProvider = ({ children }) => {


    const [user, setUser] = useState(null);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);



    const API_URL = `${process.env.NEXT_PUBLIC_API_URL}/auth`;



    const friendlyError = "Could not connect to the server. Please check your connection and try again later.";


    // Function to clear the error
    const clearError = () => setError(null);




    const checkSession = async () => {
        try {
            const response = await fetch(`${API_URL}/profile`, { credentials: 'include' });
            if (response.ok) {
                const data = await response.json();
                if (data.logged_in) {
                    setUser(data.user);
                    setIsAuthenticated(true);
                } else {
                    setIsAuthenticated(false);
                    setUser(null);
                }
            } else {
                setIsAuthenticated(false);
                setUser(null);
            }
        } catch (err) {
            console.error("Session check failed:", err);
            setError(friendlyError); // Set the global error
            setIsAuthenticated(false);
            setUser(null);
        } finally {
            setLoading(false);
        }
    };



    useEffect(() => {
        checkSession();
    }, []);





    const login = async (email, password) => {
        try {
            const response = await fetch(`${API_URL}/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password }),
                credentials: 'include'
            });
            const data = await response.json();
            if (response.ok) {
                setUser(data.user);
                setIsAuthenticated(true);
                return { success: true };
            }
            return { success: false, error: data.error };
        } catch (err) {
            console.error("Login failed:", err);
            setError(friendlyError); // Set the global error
            return { success: false, error: friendlyError };
        }
    };


    const signup = async (username, email, password) => {
        try {
            const response = await fetch(`${API_URL}/signup`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, email, password }),
                credentials: 'include'
            });
            const data = await response.json();
            if (response.ok) {
                return { success: true };
            }
            return { success: false, error: data.error };
        } catch (err) {
            console.error("Signup failed:", err);
            setError(friendlyError);
            return { success: false, error: friendlyError };
        }
    };


    const logout = async () => {
        try {
            await fetch(`${API_URL}/logout`, { method: 'POST', credentials: 'include' });
        } catch (err) {
            console.error("Logout failed:", err);
            setError(friendlyError); // Set the global error
        } finally {
            setUser(null);
            setIsAuthenticated(false);
        }
    };



    const value = { user, isAuthenticated, loading, login, signup, logout, error, clearError };




    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );

};


export const useAuth = () => useContext(AuthContext);
</file>

<file path="package.json">
{
  "name": "upskill-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "date-fns": "^4.1.0",
    "framer-motion": "^12.23.12",
    "lucide-react": "^0.539.0",
    "next": "15.4.6",
    "next-themes": "^0.4.6",
    "react": "19.1.0",
    "react-day-picker": "^9.9.0",
    "react-dom": "19.1.0",
    "react-hot-toast": "^2.6.0",
    "recharts": "^3.1.2"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17"
  }
}
</file>

<file path="app/layout.js">
import { Inter } from "next/font/google";
import "./globals.css";

import { ThemeProvider } from '../components/shared/ThemeProvider';
import { AuthProvider } from "@/context/AuthContext";
import { GlobalErrorNotifier } from "@/components/shared/GlobalErrorNotifier";
import AppLayout from "@/components/shared/AppLayout";

const inter = Inter({ subsets: ["latin"] });

export const metadata = {
	title: "Upskill",
	description: "Upskill platform",
};

export default function RootLayout({ children }) {
	return (
		<html lang="en" suppressHydrationWarning>
			<body
				className={`${inter.className} antialiased`}
			>
                <AuthProvider>
                    <GlobalErrorNotifier />
				    <ThemeProvider>
					    <AppLayout>{children}</AppLayout>
				    </ThemeProvider>
                </AuthProvider>
			</body>
		</html>
	);
}
</file>

<file path="components/Quests.js">
"use client";
import { Shield, Target } from 'lucide-react';
import { Card, SectionTitle } from "./shared/Helper";

export const Quests = ({ initialQuests }) => {
    return (
        <div>
            <SectionTitle icon={<Target className="h-6 w-6 text-csway-orange" />} title="Challenges & Quests" />
            <p className="mb-6 text-gray-600 dark:text-gray-400">Engage in challenges to earn points, unlock badges, and grow your skills.</p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {initialQuests.map(quest => (
                    <Card key={quest.id} className={quest.completed ? 'opacity-60 bg-gray-50 dark:bg-gray-800/50' : ''}>
                        <div className="flex justify-between items-start">
                            <h3 className="text-lg font-bold text-gray-900 dark:text-white">{quest.title}</h3>
                            <span className="bg-yellow-100 text-yellow-800 text-xs font-semibold px-2.5 py-0.5 rounded-full dark:bg-yellow-900 dark:text-yellow-300">{quest.points} PTS</span>
                        </div>
                        
                        {/* 👇 The description and all other UI elements are preserved */}
                        <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">{quest.description}</p>
                        
                        <div className="mt-4">
                            <div className="flex justify-between mb-1">
                                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Progress</span>
                                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">{quest.progress}%</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
                                <div className="bg-csway-green h-2.5 rounded-full" style={{ width: `${quest.progress}%` }}></div>
                            </div>
                        </div>
                        {quest.completed && (
                            <div className="mt-4 flex items-center text-green-600 dark:text-green-400">
                                <Shield className="h-5 w-5" />
                                <span className="ml-2 text-sm font-semibold">Completed</span>
                            </div>
                        )}
                    </Card>
                ))}
            </div>
        </div>
    );
};
</file>

<file path="mock/mock_data.js">
// --- LEADERBOARD DATA ---
export const MOCK_LEADERBOARD = [
    { id: 1, name: 'Alex Rivera', points: 4250, badges: ['🚀', '🎯', '🔥'] },
    { id: 2, name: 'Casey Jordan', points: 3980, badges: ['💡', '🎯'] },
    { id: 3, name: 'Taylor Morgan', points: 3710, badges: ['🤝'] },
    { id: 4, name: 'Jordan Smith', points: 3500, badges: ['🚀'] },
    { id: 5, name: 'Jamie Lee', points: 3200, badges: ['💡', '🤝'] },
    { id: 6, name: 'Morgan Quinn', points: 2950, badges: ['🎯'] },
    { id: 7, name: 'Riley Chen', points: 2810, badges: ['🔥', '🤝'] },
    { id: 8, name: 'Devin Patel', points: 2650, badges: ['💡'] },
    { id: 9, name: 'Skyler Kim', points: 2400, badges: ['🚀', '🎯'] },
    { id: 10, name: 'Avery Garcia', points: 2230, badges: ['🤝'] },
    { id: 11, name: 'Parker Williams', points: 2100, badges: ['💡'] },
    { id: 12, name: 'Cameron Ito', points: 1980, badges: ['🔥'] },
    { id: 13, name: 'Rowan Davis', points: 1850, badges: ['🚀'] },
    { id: 14, name: 'Kai Martinez', points: 1720, badges: ['🎯', '🤝'] },
    { id: 15, name: 'Logan Rodriguez', points: 1600, badges: ['💡'] },
    { id: 16, name: 'Blake Nguyen', points: 1450, badges: [] },
    { id: 17, name: 'Drew Wilson', points: 1300, badges: ['🤝'] },
    { id: 18, name: 'Hayden Brown', points: 1150, badges: ['🚀'] },
    { id: 19, name: 'Emerson Taylor', points: 980, badges: ['💡'] },
    { id: 20, name: 'Jesse Miller', points: 850, badges: [] },
];

// --- QUESTS DATA ---
export const MOCK_QUESTS = [
    { id: 1, title: 'Adaptability Ace', description: 'Complete the "Handling Change" module and score 90% on the quiz.', points: 150, progress: 100, completed: true },
    { id: 2, title: 'Communication Pro', description: 'Provide constructive feedback on 5 different project documents.', points: 200, progress: 60, completed: false },
    { id: 3, title: 'Leadership Leap', description: 'Lead a project planning session and submit the meeting notes.', points: 250, progress: 0, completed: false },
    { id: 4, title: 'Teamwork Titan', description: 'Successfully complete a paired programming challenge.', points: 100, progress: 100, completed: true },
];

// --- DASHBOARD DATA ---
export const MOCK_DASHBOARD = {
    agendaItems: [
        { id: 1, type: 'article', title: 'The Art of Giving Constructive Feedback', category: 'Communication', due_date: '2025-08-18' },
        { id: 2, type: 'meeting', title: 'Q3 Project Kickoff', category: 'Planning', due_date: '2025-08-19' },
        { id: 3, type: 'article', title: 'Leading Without Authority', category: 'Leadership', due_date: '2025-08-20' },
    ],
    activityStream: [
        { id: 1, user_name: 'Alex Rivera', action: 'opened a feedback request for the "Q4 Product Launch" document.', created_at: '2025-09-03T10:00:46Z' },
        { id: 2, user_name: 'Jeff Bezos', action: 'completed the quest "Onboarding Champion".', created_at: '2025-09-03T11:30:46Z' },
        { id: 3, user_name: 'Taylor Morgan', action: 'edited the "Engineering Team Weekly Agenda".', created_at: '2025-09-03T11:15:46Z' },
        { id: 4, user_name: 'Casey Jordan', action: 'published a new article titled "Mastering Asynchronous Communication".', created_at: '2025-09-03T06:15:46Z' },
        { id: 5, user_name: 'Georgii Parla', action: 'edited the "Linux Development Roadmap".', created_at: '2025-09-01T10:00:00Z' },
    ],
    activityData: {
        personal: {
            quests: { allTime: 5, thisWeek: 1 },
            feedback: { allTime: 8, thisWeek: 3 },
            points: { allTime: 1250, thisWeek: 75 },
            streak: 14
        },
        team: {
            quests: { allTime: 256, thisWeek: 12 },
            feedback: { allTime: 891, thisWeek: 34 },
        }
    }
};


// --- FEEDBACK DATA ---

export const MOCK_FEEDBACK_TOPICS = [
    'General Feedback',
    '[28 Aug 10:03] Strategy Deck, Alex Rivera',
    '[28 Aug 09:45] API Refactor, Casey Jordan',
    '[27 Aug 15:30] Client Presentation, Taylor Morgan',
    '[27 Aug 11:15] Dashboard Mockup, Jordan Smith',
    '[26 Aug 16:50] Onboarding Process, Jamie Lee',
];

// For the scrollable history list
export const MOCK_FEEDBACK_HISTORY = [
    { user_id: 1, subject: 'Q3 Marketing Plan', content: 'The plan is well-structured...', created_at: '2025-08-15T09:00:00Z', sentiment: 'Neutral' },
    { user_id: 2, subject: 'New Feature Design', content: 'I love the new UI!...', created_at: '2025-08-14T11:30:00Z', sentiment: 'Positive' },
    { user_id: 3, subject: 'API Documentation', content: 'The endpoint for user authentication is missing...', created_at: '2025-08-12T16:45:00Z', sentiment: 'Negative' },
    { user_id: 4, subject: 'API Documentation', content: 'The endpoint for user authentication is missing...', created_at: '2025-08-13T16:45:00Z', sentiment: 'Negative' },
    { user_id: 5, subject: 'API Documentation', content: 'The endpoint for user authentication is missing...', created_at: '2025-08-14T16:45:00Z', sentiment: 'Negative' },
    { user_id: 6, subject: 'API Documentation', content: 'The endpoint for user authentication is missing...', created_at: '2025-08-15T16:45:00Z', sentiment: 'Negative' },
];

export const MOCK_FEEDBACK_REQUESTS = [
    {
        id: 1,
        subject: 'Q4 Strategy Deck Review',
        question: 'Looking for feedback on the new market analysis on slide 5.',
        status: 'Posted',
        requested_at: '2025-08-22'
    },
    {
        id: 2,
        subject: 'API Refactor Branch',
        question: 'Is the new error handling logic robust enough for production?',
        status: 'Pending',
        requested_at: '2025-08-26'
    },
];
</file>

<file path="components/Leaderboard.js">
"use client"
import React from 'react';
import { Trophy, Award } from 'lucide-react';
import { Card, SectionTitle } from "./shared/Helper";

export const Leaderboard = ({ initialData }) => {
    const getTrophyIcon = (rank) => {
        if (rank === 1) return <Trophy className="h-6 w-6 text-csway-orange" />;
        if (rank === 2) return <Trophy className="h-6 w-6 text-gray-400" />;
        if (rank === 3) return <Trophy className="h-6 w-6 text-csway-red" />;
        return <span className="text-gray-500 dark:text-gray-400 font-bold w-6 text-center">{rank}</span>;
    };

    const topThree = initialData.slice(0, 3);
    const restOfLeaderboard = initialData.slice(3);

    return (
        <div className="space-y-12">
            <div>
                <SectionTitle icon={<Award className="h-6 w-6 text-csway-orange" />} title="COMMS Podium Finishers" />
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
                    <div className="md:order-1">
                        {topThree[1] && (
                            <Card className="border-2 text-center p-4 !border-gray-300 !dark:border-gray-600">
                                <Trophy className="h-10 w-10 mx-auto mb-2 text-gray-400" />
                                <h3 className="font-bold text-lg text-gray-800 dark:text-white">{topThree[1].name}</h3>
                                <p className="font-semibold text-gray-500 dark:text-gray-400">2nd Place</p>
                                <p className="text-2xl font-bold text-gray-800 dark:text-white mt-2">{topThree[1].points.toLocaleString()} PTS</p>
                            </Card>
                        )}
                    </div>
                    <div className="md:order-2 relative z-10">
                        {topThree[0] && (
                            <Card className="border-2 text-center p-6 !border-csway-orange dark:border-csway-orange transform md:scale-110 shadow-lg">
                                <Trophy className="h-12 w-12 text-csway-orange mx-auto mb-2" />
                                <h3 className="font-bold text-xl text-gray-800 dark:text-white">{topThree[0].name}</h3>
                                <p className="font-semibold text-csway-orange">1st Place</p>
                                <p className="text-3xl font-bold text-gray-800 dark:text-white mt-2">{topThree[0].points.toLocaleString()} PTS</p>
                            </Card>
                        )}
                    </div>
                    <div className="md:order-3">
                        {topThree[2] && (
                            <Card className="border-2 text-center p-4 !border-csway-red/50 dark:border-csway-red/80">
                                <Trophy className="h-10 w-10 mx-auto mb-2 text-csway-red" />
                                <h3 className="font-bold text-lg text-gray-800 dark:text-white">{topThree[2].name}</h3>
                                <p className="font-semibold text-csway-red">3rd Place</p>
                                <p className="text-2xl font-bold text-gray-800 dark:text-white mt-2">{topThree[2].points.toLocaleString()} PTS</p>
                            </Card>
                        )}
                    </div>
                </div>
            </div>
            <div>
                <SectionTitle icon={<Trophy className="h-6 w-6 text-csway-orange" />} title="Ladder" />
                {/* Desktop View */}
                <div className="hidden md:block">
                    <Card>
                        <div className="overflow-x-auto">
                            <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400">
                                <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                                    <tr>
                                        <th scope="col" className="px-6 py-3">Rank</th>
                                        <th scope="col" className="px-6 py-3">User</th>
                                        <th scope="col" className="px-6 py-3">Badges</th>
                                        <th scope="col" className="px-6 py-3 text-right">Points</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {restOfLeaderboard.map((user, index) => (
                                        <tr key={user.id} className="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600">
                                            <td className="px-6 py-4">{getTrophyIcon(index + 4)}</td>
                                            <th scope="row" className="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">{user.name}</th>
                                            <td className="px-6 py-4"><div className="flex space-x-2">{user.badges.map((badge, i) => <span key={i} className="text-xl">{badge}</span>)}</div></td>
                                            <td className="px-6 py-4 text-right font-bold text-gray-800 dark:text-white">{user.points.toLocaleString()}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </Card>
                </div>
                {/* Mobile view */}
                <div className="md:hidden">
                    <Card>
                        <div className="space-y-2">
                            {restOfLeaderboard.map((user, index) => (
                                <div key={user.id} className="flex items-center justify-between p-3 bg-white dark:bg-gray-800 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 border-b dark:border-gray-700 last:border-b-0">
                                    <div className="flex items-center space-x-4">
                                        <div>{getTrophyIcon(index + 4)}</div>
                                        <span className=" text-gray-900 dark:text-white">{user.name}</span>
                                    </div>
                                    <span className="font-medium text-gray-800 dark:text-white">{user.points.toLocaleString()} PTS</span>
                                </div>
                            ))}
                        </div>
                    </Card>
                </div>
            </div>
        </div>
    );
};
</file>

<file path="app/page.js">
import { redirect } from 'next/navigation';

export default function RootPage() {
  redirect('/dashboard');
}
</file>

<file path="components/Dashboard.js">
"use client";
import React, { useState } from 'react';
import {
    Activity as ActivityIcon, Calendar, BookOpen,
    Timer, Shield, ThumbsUp
} from 'lucide-react';
import { Card, SectionTitle, InfoCard } from "./shared/Helper";
import HypedToggleSwitch from './HypedToggleSwitch';
import { formatRelativeTime } from '@/lib/helper_func';

const MetricItem = ({ icon, label, allTime, thisWeek }) => (
    <div className="bg-slate-50/50 dark:bg-slate-800/50 p-4 rounded-lg border border-slate-200 dark:border-slate-700">
        <div className="flex items-start space-x-4">
            <div className="flex-shrink-0 mt-1">{icon}</div>
            <div className="flex flex-col">
                <span className="text-sm text-gray-500 dark:text-gray-400">{label}</span>
                <div className="flex items-baseline space-x-2">
                    <span className="text-2xl font-bold text-gray-900 dark:text-white">{allTime.toLocaleString()}</span>
                    {Number(thisWeek) > 0 && (
                        <span className="text-sm font-semibold text-green-500">+{thisWeek.toLocaleString()} this week</span>
                    )}
                </div>
            </div>
        </div>
    </div>
);

const ActivityCard = ({ activityData }) => {
    const [activeView, setActiveView] = useState('personal');
    const currentData = activityData[activeView];

    const toggleOptions = [
        { id: 'personal', label: 'Me' },
        { id: 'team', label: 'Team' },
    ];

    return (
        <Card
            className='h-full min-h-[300px]'
            innerClassName='h-full flex flex-col justify-between'
        >
            <HypedToggleSwitch
                options={toggleOptions}
                activeOption={activeView}
                setActiveOption={setActiveView}
            />
            <div className="grid grid-cols-1 gap-4">
                <MetricItem
                    icon={<Shield className="h-6 w-6 text-csway-green" />}
                    label="Quests Completed"
                    allTime={currentData.quests.allTime}
                    thisWeek={currentData.quests.thisWeek}
                />
                <MetricItem
                    icon={<ThumbsUp className="h-6 w-6 text-csway-red" />}
                    label="Feedback Given"
                    allTime={currentData.feedback.allTime}
                    thisWeek={currentData.feedback.thisWeek}
                />
            </div>
        </Card>
    );
};

export default function Dashboard({ initialData }) {
    return (
        <div className="space-y-8">
            <Card>
                <SectionTitle icon={<BookOpen className="h-6 w-6 text-csway-orange" />} title="This Week's Agenda" className={'mb-7'} />
                <ol className="relative border-l border-gray-200 dark:border-gray-700 ml-3">
                    {initialData.agendaItems.map((item) => (
                        <li key={item.id} className="mb-6 ml-6">
                            <span className={`absolute flex items-center justify-center w-6 h-6 rounded-full -left-3 ${item.type === 'article' ? 'bg-purple-200 dark:bg-purple-900' : 'bg-csway-red/20 dark:bg-csway-red/20'}`}>
                                {item.type === 'article' ? <BookOpen className="w-3 h-3 text-purple-600 dark:text-purple-300" /> : <Calendar className="w-3 h-3 text-csway-red dark:text-csway-red" />}
                            </span>
                            <div className="p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg border border-gray-200 dark:border-gray-600 shadow-sm group hover:bg-csway-green/10 dark:hover:bg-gray-700 transition-all cursor-pointer">
                                <p className="text-sm font-normal text-gray-500 dark:text-gray-400 mb-1">{item.type === 'article' ? `Learning: ${item.category}` : `Meeting: ${item.due_date}`}</p>
                                <a href="#" className="text-base font-semibold text-gray-900 dark:text-white group-hover:text-csway-green dark:group-hover:text-csway-green transition-colors">{item.title}</a>
                            </div>
                        </li>
                    ))}
                </ol>
            </Card>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
                <div className="md:col-span-1">
                    <ActivityCard activityData={initialData.activityData} />
                </div>
                <div className="md:col-span-2">
                    <InfoCard
                        icon={<Timer className="h-6 w-6 text-csway-orange" />}
                        title="Live Activity Stream"
                        items={initialData.activityStream}
                        listClassName="space-y-4"
                        renderItem={(item) => (
                            <li key={item.id} className="flex items-start p-3 rounded-lg transition-colors hover:bg-gray-500/10">
                                <div className="flex-shrink-0 mt-1"><ActivityIcon className="h-5 w-5 text-csway-red" /></div>
                                <div className="ml-4 flex-grow">
                                    <p className="text-sm text-gray-700 dark:text-gray-300">
                                        <span className="font-bold text-gray-900 dark:text-white">{item.user_name}</span> {item.action}
                                    </p>
                                    <p className="text-xs text-gray-500 dark:text-gray-400 mt-0.5">{formatRelativeTime(item.created_at)}</p>
                                </div>
                            </li>
                        )}
                    />
                </div>
            </div>
        </div>
    );
}
</file>

</files>
